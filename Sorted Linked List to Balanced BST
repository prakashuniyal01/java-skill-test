Sorted Linked List to Balanced BST
You have been given a singly linked list in which nodes are present in increasing order. Your task is to construct a Balanced Binary Search Tree with the same data elements as the given Linked List.
A Balanced BST is defined as a BST in which the height of two subtrees of every node differs no more than 1.
Input Format :
The first line of input contains an integer ‘T’ denoting the number of test cases to run. Then the test case follows.

The only line of each test case contains the elements of the singly linked list separated by a single space and terminated by -1. Hence, -1 would never be a list element.
Output Format :
For each test case, print the nodes of the tree in the level order form separated by single spaces (Print -1 for NULL nodes). Refer to the below example for further clarification.

Print the output for every test case in a separate line.
For Example
Consider the Binary Search Tree-
alt text

The above BST will be printed as-
12 10 14 -1 -1 -1 16 -1 -1

Explanation :
Level 1 :
The root node of the tree is 12

Level 2 :
Left child of 12 = 10
Right child of 12 = 14

Level 3 :
Left child of 10 = null(-1)
Right child of 10 = null (-1)
Left child of 14 = null(-1)
Right child of 16 = 16

Level 4 :
Left child of 16 = null (-1)
Right child of 16 = null (-1)

The first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.

The output for each test case ends when all nodes at the last level are null (-1).
Note :
You do not need to print anything, it has already been taken care of. Just implement the given function.
Constraints :
1 <= T <= 100
0 <= N <= 1000
1 <= Data <= 10^9
Data != -1

Time Limit: 1sec
Sample Input 1 :
2
1 2 3 4 5 -1
5 7 8 -1
Sample Output 1:
3 2 5 1 -1 4 -1 -1 -1 -1 -1 
7 5 8 -1 -1 -1 -1 
Explanation for Sample Input 1:
Test Case 1: The balanced BST corresponding to the linked list is-
alt text

Level order traversal of above BST is 3 2 5 1 -1 4 -1 -1 -1 -1 -1 

Test Case 2: The balanced BST corresponding to the linked list is-
alt text

Level order traversal of above BST is 7 5 8 -1 -1 -1 -1 
Sample Input 2 :
2
10 12 14 16 -1
-1
Sample Output 2 :
12 10 14 -1 -1 -1 16 -1 -1
-1


code in java *************************************************************

import java.util.*;

public class Solution
{
public static TreeNode<Integer> inorder(List head, int leftBoundary, int rightBoundary)
    {

        if (leftBoundary > rightBoundary)
        {
            return null;
        }
        int mid = (leftBoundary + rightBoundary + 1) / 2;
        TreeNode newNode = new TreeNode((int)head.get(mid));

        // Recursing on the left subtree
        newNode.left = inorder(head, leftBoundary, mid - 1);

        // Recursing on the right subtree
        newNode.right = inorder(head, mid + 1, rightBoundary);

        return newNode;
    }

public static TreeNode<Integer> sortedListToBST(Node<Integer> head)
    {
        List temp = new ArrayList();
        while (head != null)
        {
            temp.add(head.data);
            head = head.next;
        }
        return inorder(temp, 0, temp.size() - 1);
    }
}


Second way 
***********************************************************
public class Solution
{
public static Node<Integer> findMiddleElement(Node<Integer> head)
    {
        // The pointer used to disconnect the left half from the mid node.
        Node<Integer> prevPtr = null;

        Node<Integer> slowPtr = head;
        Node<Integer> fastPtr = head;

        while (fastPtr != null && fastPtr.next != null)
        {
            prevPtr = slowPtr;
            slowPtr = slowPtr.next;
            fastPtr = fastPtr.next.next;
        }

        // Handling the case when 'slowPtr' was equal to head.
        if (prevPtr != null)
        {
            prevPtr.next = null;
        }

        return slowPtr;
    }
    
public static TreeNode<Integer> sortedListToBST(Node<Integer> head)
    {
        if (head == null)
        {
            return null;
        }

        Node<Integer> mid = findMiddleElement(head);

        TreeNode<Integer> newNode = new TreeNode<Integer>(mid.data);

        // When there is only one element in the Linked List
        if (head == mid)
        {
            return newNode;
        }

        // Recursively form balanced BST for left and right subtree
        newNode.left = sortedListToBST(head);
        newNode.right = sortedListToBST(mid.next);

        return newNode;
    }
}

