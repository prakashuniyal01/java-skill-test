Sort an array
Send Feedback
Given an array A[] of integers, sort the array according to frequency of elements. That is elements that have higher frequency come first. If frequencies of two elements are same, then smaller number comes first.
Input Format:
The first line contains a single integer N denoting the size of array. The second line contains N space-separated integers A1, A2, ..., AN denoting the elements of the array. 
Output Format:
Print the soted array seperated by a space.
Example:
Input:
6
1 2 2 2 3 3
Output:
2 2 2 3 3 1


ode in java 
***********************************************************
import java.util.*;
public class Solution { 
	public static void main(String[] args) 
	{
	    Scanner sc= new Scanner(System.in);
	    int n = sc.nextInt();
	    int array[]=new int[n];
	    for(int i=0;i<n;i++)
	    array[i]=sc.nextInt();
	    
	    Map<Integer,Integer> map = new HashMap<>();
	    List<Integer> outputArray = new ArrayList<>();
	     for(int current : array)
	     {
	         int count = map.getOrDefault(current, 0);
	         map.put(current,count+1);
	         outputArray.add(current);
	     }
	     SortComparator comp =new SortComparator(map);
	     
	     Collections.sort(outputArray, comp);
	     
	     for(Integer i : outputArray)
	     {
	         System.out.print(i+" ");
	       
	     }
	}
}
class SortComparator implements Comparator<Integer>
{
    private final Map<Integer,Integer> freqMap;
    
    SortComparator(Map<Integer,Integer> tFreqMap)
    {
        this.freqMap = tFreqMap;
    }
    
    public int compare(Integer k1, Integer k2)
    {
        int freqCompare = freqMap.get(k2).compareTo(freqMap.get(k1));
        
        int valueCompare = k1.compareTo(k2);
        
        if(freqCompare==0)
        return valueCompare;
        else
        return freqCompare;
}
}
